{"ast":null,"code":"var _jsxFileName = \"/Users/mahmood/Desktop/PROJECT/frontend/hotspot-map/src/components/mymap.jsx\";\nimport React, { Component } from 'react';\nimport { Marker, MapContainer, GeoJSON, TileLayer, Popup } from \"react-leaflet\";\nimport county_ca from './../data/county_ca.json';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport data from './../data/markers.json';\nimport icon from './marker.png'; // let DefaultIcon = L.icon({\n//     iconUrl: icon,\n//     iconSize:[20,20],\n//     iconAnchor:[17,20]\n// });\n// L.Marker.prototype.options.icon = DefaultIcon;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MyMap extends Component {\n  constructor() {\n    super();\n\n    this.getColor = n => {\n      if (n > 2) {\n        return \"red\";\n      } else {\n        return \"blue\";\n      }\n    };\n\n    this.countyStyle = {\n      fillColor: \"blue\",\n      fillOpacity: .6,\n      color: \"black\",\n      weight: .8\n    };\n\n    this.onEachCounty = (county, layer) => {\n      const countyName = county.properties.NAME;\n      layer.bindPopup(`${countyName}`);\n\n      if (county.properties.COUNTYFP > 34) {\n        layer.options.fillColor = \"green\";\n      }\n    };\n\n    this.state = {\n      names: [],\n      markers: []\n    };\n  }\n\n  componentDidMount() {\n    for (var i = 0; i < data.length; i++) {\n      this.state.markers.push([data[i].latitude, data[i].longitude]);\n      this.state.names.push([data[i].p_name]);\n    } //this.setState({markers:coordinates});\n    //console.log(this.state.names);\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        style: {\n          height: \"80vh\",\n          width: '80%',\n          margin: 'auto'\n        },\n        zoom: 6,\n        center: [38, -122],\n        scrollWheelZoom: false,\n        children: [/*#__PURE__*/_jsxDEV(GeoJSON, {\n          style: this.countyStyle,\n          data: county_ca.features,\n          onEachFeature: this.onEachCounty\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MyMap;","map":{"version":3,"sources":["/Users/mahmood/Desktop/PROJECT/frontend/hotspot-map/src/components/mymap.jsx"],"names":["React","Component","Marker","MapContainer","GeoJSON","TileLayer","Popup","county_ca","L","data","icon","MyMap","constructor","getColor","n","countyStyle","fillColor","fillOpacity","color","weight","onEachCounty","county","layer","countyName","properties","NAME","bindPopup","COUNTYFP","options","state","names","markers","componentDidMount","i","length","push","latitude","longitude","p_name","render","height","width","margin","features"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,MAAR,EAAgBC,YAAhB,EAA8BC,OAA9B,EAAuCC,SAAvC,EAAiDC,KAAjD,QAA6D,eAA7D;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,0BAAP;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,cAAjB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAEA,MAAMC,KAAN,SAAoBV,SAApB,CAA8B;AAC1BW,EAAAA,WAAW,GAAI;AACX;;AADW,SAmBfC,QAnBe,GAmBHC,CAAD,IAAO;AACd,UAAGA,CAAC,GAAG,CAAP,EAAS;AACL,eAAO,KAAP;AACH,OAFD,MAGI;AACA,eAAO,MAAP;AACH;AAEJ,KA3Bc;;AAAA,SA6BfC,WA7Be,GA6BD;AACVC,MAAAA,SAAS,EAAE,MADD;AAEVC,MAAAA,WAAW,EAAE,EAFH;AAGVC,MAAAA,KAAK,EAAE,OAHG;AAIVC,MAAAA,MAAM,EAAC;AAJG,KA7BC;;AAAA,SAsCfC,YAtCe,GAsCA,CAACC,MAAD,EAASC,KAAT,KAAkB;AAC7B,YAAMC,UAAU,GAAGF,MAAM,CAACG,UAAP,CAAkBC,IAArC;AACAH,MAAAA,KAAK,CAACI,SAAN,CAAiB,GAAEH,UAAW,EAA9B;;AAEA,UAAGF,MAAM,CAACG,UAAP,CAAkBG,QAAlB,GAA6B,EAAhC,EAAmC;AAC/BL,QAAAA,KAAK,CAACM,OAAN,CAAcZ,SAAd,GAA0B,OAA1B;AACH;AAGJ,KA/Cc;;AAEX,SAAKa,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAC,EADG;AAETC,MAAAA,OAAO,EAAC;AAFC,KAAb;AAIP;;AAEGC,EAAAA,iBAAiB,GAAG;AAEhB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,IAAI,CAACyB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,WAAKJ,KAAL,CAAWE,OAAX,CAAmBI,IAAnB,CAAwB,CAAC1B,IAAI,CAACwB,CAAD,CAAJ,CAAQG,QAAT,EAAmB3B,IAAI,CAACwB,CAAD,CAAJ,CAAQI,SAA3B,CAAxB;AACA,WAAKR,KAAL,CAAWC,KAAX,CAAiBK,IAAjB,CAAsB,CAAC1B,IAAI,CAACwB,CAAD,CAAJ,CAAQK,MAAT,CAAtB;AACH,KALe,CAOhB;AACA;;AACH;;AAkCDC,EAAAA,MAAM,GAAG;AAEL,wBACI;AAAA,6BACI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAI;AAACC,UAAAA,MAAM,EAAE,MAAT;AAAiBC,UAAAA,KAAK,EAAE,KAAxB;AAA+BC,UAAAA,MAAM,EAAE;AAAvC,SAAvB;AAAuE,QAAA,IAAI,EAAI,CAA/E;AAAkF,QAAA,MAAM,EAAI,CAAC,EAAD,EAAK,CAAC,GAAN,CAA5F;AAAwG,QAAA,eAAe,EAAI,KAA3H;AAAA,gCACI,QAAC,OAAD;AAAS,UAAA,KAAK,EAAI,KAAK3B,WAAvB;AAAoC,UAAA,IAAI,EAAGR,SAAS,CAACoC,QAArD;AAA+D,UAAA,aAAa,EAAE,KAAKvB;AAAnF;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,SAAD;AACC,UAAA,WAAW,EAAC,0EADb;AAEC,UAAA,GAAG,EAAC;AAFL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH;;AAvEyB;;AA0E9B,eAAeT,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Marker, MapContainer, GeoJSON, TileLayer,Popup} from \"react-leaflet\"\nimport county_ca from './../data/county_ca.json'\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet'\nimport data from './../data/markers.json'\nimport icon from './marker.png';\n\n// let DefaultIcon = L.icon({\n//     iconUrl: icon,\n//     iconSize:[20,20],\n//     iconAnchor:[17,20]\n// });\n\n// L.Marker.prototype.options.icon = DefaultIcon;\n\nclass MyMap extends Component {\n    constructor () {\n        super();\n        this.state = {\n            names:[],\n            markers:[]\n        };\n}\n\n    componentDidMount() {\n\n        for (var i = 0; i < data.length; i++) {\n            this.state.markers.push([data[i].latitude, data[i].longitude]);\n            this.state.names.push([data[i].p_name]);\n        }\n\n        //this.setState({markers:coordinates});\n        //console.log(this.state.names);\n    }\n\n    getColor = (n) => {\n        if(n > 2){\n            return \"red\";\n        }\n        else{\n            return \"blue\";\n        }\n    \n    };\n\n    countyStyle = {\n        fillColor: \"blue\",\n        fillOpacity: .6,\n        color: \"black\",\n        weight:.8,\n        \n    };\n\n   \n    onEachCounty = (county, layer) =>{\n        const countyName = county.properties.NAME;\n        layer.bindPopup(`${countyName}`)\n         \n        if(county.properties.COUNTYFP > 34){\n            layer.options.fillColor = \"green\"\n        }\n\n\n    };\n\n    \n\n    render() {\n\n        return ( \n            <div>\n                <MapContainer style = {{height: \"80vh\", width: '80%', margin: 'auto'}} zoom = {6} center = {[38, -122]} scrollWheelZoom = {false}>\n                    <GeoJSON style = {this.countyStyle} data ={county_ca.features} onEachFeature={this.onEachCounty}/>\n                    <TileLayer\n                     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                     />\n                    {/* {this.state.markers.map((position, idx) => \n                        <Marker key={`marker-${idx}`} position={position}>\n                        </Marker>\n                    )} */}\n\n\n                </MapContainer>\n            </div>\n        );\n    }\n}\n\nexport default MyMap"]},"metadata":{},"sourceType":"module"}