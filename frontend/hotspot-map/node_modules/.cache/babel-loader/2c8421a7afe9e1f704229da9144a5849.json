{"ast":null,"code":"var _jsxFileName = \"/Users/mahmood/Desktop/PROJECT/frontend/hotspot-map/src/components/mymap.jsx\";\nimport React, { Component } from 'react';\nimport { Marker, MapContainer, GeoJSON, TileLayer, Popup, Circle } from \"react-leaflet\";\nimport county_ca from './../data/county_ca.json';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport markers from './../data/markers.json';\nimport icon from './marker.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  iconSize: [20, 20],\n  iconAnchor: [17, 20]\n});\nvar marks = {};\nvar coordinates = [];\nL.Marker.prototype.options.icon = DefaultIcon;\n\nclass MyMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      marks: []\n    };\n\n    this.getColor = n => {\n      if (n > 2) {\n        return \"red\";\n      } else {\n        return \"blue\";\n      }\n    };\n\n    this.countyStyle = {\n      fillColor: \"blue\",\n      fillOpacity: .6,\n      color: \"black\",\n      weight: .8\n    };\n\n    this.onEachCounty = (county, layer) => {\n      const countyName = county.properties.NAME;\n      layer.bindPopup(`${countyName}`);\n\n      if (county.properties.COUNTYFP > 34) {\n        layer.options.fillColor = \"green\";\n      }\n    };\n  }\n\n  componentDidMount() {\n    for (var i = 0; i < markers.length; i++) {\n      coordinates.push([markers[i].latitude, markers[i].longitude]);\n    }\n\n    this.setState({\n      marks: coordinates\n    });\n    console.log(marks);\n    console.log(county_ca);\n  }\n\n  render() {\n    const pos = this.props.coordinates;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        style: {\n          height: \"80vh\",\n          width: '80%',\n          margin: 'auto'\n        },\n        zoom: 6,\n        center: [38, -122],\n        scrollWheelZoom: false,\n        children: [/*#__PURE__*/_jsxDEV(GeoJSON, {\n          style: this.countyStyle,\n          data: county_ca.features,\n          onEachFeature: this.onEachCounty\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), marks.map((mark, index) => /*#__PURE__*/_jsxDEV(Circle, {\n          center: mark,\n          radius: 1000,\n          options: {\n            strokeColor: \"#66009a\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: `#66009a`,\n            fillOpacity: 0.35,\n            zIndex: 1\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MyMap;","map":{"version":3,"sources":["/Users/mahmood/Desktop/PROJECT/frontend/hotspot-map/src/components/mymap.jsx"],"names":["React","Component","Marker","MapContainer","GeoJSON","TileLayer","Popup","Circle","county_ca","L","markers","icon","DefaultIcon","iconUrl","iconSize","iconAnchor","marks","coordinates","prototype","options","MyMap","state","getColor","n","countyStyle","fillColor","fillOpacity","color","weight","onEachCounty","county","layer","countyName","properties","NAME","bindPopup","COUNTYFP","componentDidMount","i","length","push","latitude","longitude","setState","console","log","render","pos","props","height","width","margin","features","map","mark","index","strokeColor","strokeOpacity","strokeWeight","zIndex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,MAAR,EAAgBC,YAAhB,EAA8BC,OAA9B,EAAuCC,SAAvC,EAAkDC,KAAlD,EAAyDC,MAAzD,QAAsE,eAAtE;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,0BAAP;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,IAAP,MAAiB,cAAjB;;AAEA,IAAIC,WAAW,GAAGH,CAAC,CAACE,IAAF,CAAO;AACrBE,EAAAA,OAAO,EAAEF,IADY;AAErBG,EAAAA,QAAQ,EAAC,CAAC,EAAD,EAAI,EAAJ,CAFY;AAGrBC,EAAAA,UAAU,EAAC,CAAC,EAAD,EAAI,EAAJ;AAHU,CAAP,CAAlB;AAMA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,WAAW,GAAG,EAAlB;AAEAR,CAAC,CAACP,MAAF,CAASgB,SAAT,CAAmBC,OAAnB,CAA2BR,IAA3B,GAAkCC,WAAlC;;AAEA,MAAMQ,KAAN,SAAoBnB,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC1BoB,KAD0B,GAClB;AACJL,MAAAA,KAAK,EAAC;AADF,KADkB;;AAAA,SAiB1BM,QAjB0B,GAiBdC,CAAD,IAAO;AACd,UAAGA,CAAC,GAAG,CAAP,EAAS;AACL,eAAO,KAAP;AACH,OAFD,MAGI;AACA,eAAO,MAAP;AACH;AAEJ,KAzByB;;AAAA,SA2B1BC,WA3B0B,GA2BZ;AACVC,MAAAA,SAAS,EAAE,MADD;AAEVC,MAAAA,WAAW,EAAE,EAFH;AAGVC,MAAAA,KAAK,EAAE,OAHG;AAIVC,MAAAA,MAAM,EAAC;AAJG,KA3BY;;AAAA,SAoC1BC,YApC0B,GAoCX,CAACC,MAAD,EAASC,KAAT,KAAkB;AAC7B,YAAMC,UAAU,GAAGF,MAAM,CAACG,UAAP,CAAkBC,IAArC;AACAH,MAAAA,KAAK,CAACI,SAAN,CAAiB,GAAEH,UAAW,EAA9B;;AAEA,UAAGF,MAAM,CAACG,UAAP,CAAkBG,QAAlB,GAA6B,EAAhC,EAAmC;AAC/BL,QAAAA,KAAK,CAACZ,OAAN,CAAcM,SAAd,GAA0B,OAA1B;AACH;AAGJ,KA7CyB;AAAA;;AAK1BY,EAAAA,iBAAiB,GAAG;AAEhB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,OAAO,CAAC6B,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCrB,MAAAA,WAAW,CAACuB,IAAZ,CAAiB,CAAC9B,OAAO,CAAC4B,CAAD,CAAP,CAAWG,QAAZ,EAAsB/B,OAAO,CAAC4B,CAAD,CAAP,CAAWI,SAAjC,CAAjB;AACH;;AAGD,SAAKC,QAAL,CAAc;AAAC3B,MAAAA,KAAK,EAACC;AAAP,KAAd;AACA2B,IAAAA,OAAO,CAACC,GAAR,CAAY7B,KAAZ;AACA4B,IAAAA,OAAO,CAACC,GAAR,CAAYrC,SAAZ;AACH;;AAkCDsC,EAAAA,MAAM,GAAG;AAEL,UAAMC,GAAG,GAAG,KAAKC,KAAL,CAAW/B,WAAvB;AACA,wBACI;AAAA,6BACI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAI;AAACgC,UAAAA,MAAM,EAAE,MAAT;AAAiBC,UAAAA,KAAK,EAAE,KAAxB;AAA+BC,UAAAA,MAAM,EAAE;AAAvC,SAAvB;AAAuE,QAAA,IAAI,EAAI,CAA/E;AAAkF,QAAA,MAAM,EAAI,CAAC,EAAD,EAAK,CAAC,GAAN,CAA5F;AAAwG,QAAA,eAAe,EAAI,KAA3H;AAAA,gCACI,QAAC,OAAD;AAAS,UAAA,KAAK,EAAI,KAAK3B,WAAvB;AAAoC,UAAA,IAAI,EAAGhB,SAAS,CAAC4C,QAArD;AAA+D,UAAA,aAAa,EAAE,KAAKvB;AAAnF;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,SAAD;AACC,UAAA,WAAW,EAAC,0EADb;AAEC,UAAA,GAAG,EAAC;AAFL;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAUKb,KAAK,CAACqC,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACP,QAAC,MAAD;AAEI,UAAA,MAAM,EAAED,IAFZ;AAGI,UAAA,MAAM,EAAE,IAHZ;AAII,UAAA,OAAO,EAAE;AACLE,YAAAA,WAAW,EAAE,SADR;AAELC,YAAAA,aAAa,EAAE,GAFV;AAGLC,YAAAA,YAAY,EAAE,CAHT;AAILjC,YAAAA,SAAS,EAAG,SAJP;AAKLC,YAAAA,WAAW,EAAE,IALR;AAMLiC,YAAAA,MAAM,EAAE;AANH;AAJb,WACSJ,KADT;AAAA;AAAA;AAAA;AAAA,gBADH,CAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA+BH;;AAnFyB;;AAsF9B,eAAenC,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Marker, MapContainer, GeoJSON, TileLayer, Popup, Circle} from \"react-leaflet\"\nimport county_ca from './../data/county_ca.json'\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet'\nimport markers from './../data/markers.json'\nimport icon from './marker.png';\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    iconSize:[20,20],\n    iconAnchor:[17,20]\n});\n\nvar marks = {};\nvar coordinates = [];\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nclass MyMap extends Component {\n    state = {\n        marks:[]\n    };\n\n    componentDidMount() {\n\n        for (var i = 0; i < markers.length; i++) {\n            coordinates.push([markers[i].latitude, markers[i].longitude]);\n        }\n\n\n        this.setState({marks:coordinates});\n        console.log(marks);\n        console.log(county_ca);\n    }\n\n    getColor = (n) => {\n        if(n > 2){\n            return \"red\";\n        }\n        else{\n            return \"blue\";\n        }\n    \n    };\n\n    countyStyle = {\n        fillColor: \"blue\",\n        fillOpacity: .6,\n        color: \"black\",\n        weight:.8,\n        \n    };\n\n   \n    onEachCounty = (county, layer) =>{\n        const countyName = county.properties.NAME;\n        layer.bindPopup(`${countyName}`)\n         \n        if(county.properties.COUNTYFP > 34){\n            layer.options.fillColor = \"green\"\n        }\n\n\n    };\n\n    \n\n    render() {\n\n        const pos = this.props.coordinates;\n        return ( \n            <div>\n                <MapContainer style = {{height: \"80vh\", width: '80%', margin: 'auto'}} zoom = {6} center = {[38, -122]} scrollWheelZoom = {false}>\n                    <GeoJSON style = {this.countyStyle} data ={county_ca.features} onEachFeature={this.onEachCounty}/>\n                    <TileLayer\n                     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                     />\n\n                    {/* <Marker position={[ 35.9705041, -120.1211248]}>\n                    </Marker> */}\n\n                    {marks.map((mark, index) => (\n                        <Circle\n                            key={index}\n                            center={mark}\n                            radius={1000}\n                            options={{\n                                strokeColor: \"#66009a\",\n                                strokeOpacity: 0.8,\n                                strokeWeight: 2,\n                                fillColor: `#66009a`,\n                                fillOpacity: 0.35,\n                                zIndex: 1\n                            }}\n                        />\n            ))}\n\n                </MapContainer>\n            </div>\n        );\n    }\n}\n\nexport default MyMap"]},"metadata":{},"sourceType":"module"}