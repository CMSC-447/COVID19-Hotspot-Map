{"ast":null,"code":"var _jsxFileName = \"/Users/mahmood/Desktop/PROJECT/frontend/hotspot-map/src/components/mymap.jsx\";\nimport React, { Component } from 'react';\nimport { Marker, MapContainer, GeoJSON, TileLayer, Popup } from \"react-leaflet\";\nimport county_ca from './../data/county_ca.json';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport data from './../data/markers.json';\nimport icon from './marker.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  iconSize: [20, 20],\n  iconAnchor: [5, 10],\n  popupAnchor: [5, 5]\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\nclass MyMap extends Component {\n  constructor() {\n    super();\n\n    this.getColor = n => {\n      if (n > 2) {\n        return \"red\";\n      } else {\n        return \"blue\";\n      }\n    };\n\n    this.countyStyle = {\n      fillColor: \"blue\",\n      fillOpacity: .6,\n      color: \"black\",\n      weight: .8\n    };\n\n    this.onEachCounty = (county, layer) => {\n      const countyName = county.properties.NAME;\n      layer.bindPopup(`${countyName}`);\n\n      if (county.properties.COUNTYFP > 34) {\n        layer.options.fillColor = \"green\";\n      }\n    };\n\n    this.state = {\n      locations: []\n    };\n  }\n\n  componentDidMount() {\n    // arrange data for marking and popups\n    for (var i = 0; i < data.length; i++) {\n      this.state.locations.push({\n        \"name\": data[i].p_name,\n        \"position\": [data[i].latitude, data[i].longitude],\n        \"city\": data[i].city,\n        \"county\": data[i].county\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        style: {\n          height: \"80vh\",\n          width: '80%',\n          margin: 'auto'\n        },\n        zoom: 6,\n        center: [38, -122],\n        scrollWheelZoom: true,\n        children: [/*#__PURE__*/_jsxDEV(GeoJSON, {\n          style: this.countyStyle,\n          data: county_ca.features,\n          onEachFeature: this.onEachCounty\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), this.state.locations.map((location, idx) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: location.position,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            anchor: \"bottom\",\n            children: [location.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \" \\\"\\\\n\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), location.city]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, `marker-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MyMap;","map":{"version":3,"sources":["/Users/mahmood/Desktop/PROJECT/frontend/hotspot-map/src/components/mymap.jsx"],"names":["React","Component","Marker","MapContainer","GeoJSON","TileLayer","Popup","county_ca","L","data","icon","DefaultIcon","iconUrl","iconSize","iconAnchor","popupAnchor","prototype","options","MyMap","constructor","getColor","n","countyStyle","fillColor","fillOpacity","color","weight","onEachCounty","county","layer","countyName","properties","NAME","bindPopup","COUNTYFP","state","locations","componentDidMount","i","length","push","p_name","latitude","longitude","city","render","height","width","margin","features","map","location","idx","position","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Marker, MapContainer, GeoJSON, TileLayer,Popup} from \"react-leaflet\"\nimport county_ca from './../data/county_ca.json'\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet'\nimport data from './../data/markers.json'\nimport icon from './marker.png';\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    iconSize:[20,20],\n    iconAnchor:[5,10],\n    popupAnchor:[5,5]\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nclass MyMap extends Component {\n    constructor () {\n        super();\n        this.state = {\n            locations:[]\n        };\n    }\n\n    componentDidMount() {\n\n        // arrange data for marking and popups\n        for (var i = 0; i < data.length; i++) {\n            this.state.locations.push({\"name\":data[i].p_name, \"position\": [data[i].latitude, data[i].longitude], \n            \"city\":data[i].city, \"county\":data[i].county});\n        }\n    }\n\n    getColor = (n) => {\n        if(n > 2){\n            return \"red\";\n        }\n        else{\n            return \"blue\";\n        }\n    \n    };\n\n    countyStyle = {\n        fillColor: \"blue\",\n        fillOpacity: .6,\n        color: \"black\",\n        weight:.8,\n        \n    };\n\n   \n    onEachCounty = (county, layer) =>{\n        const countyName = county.properties.NAME;\n        layer.bindPopup(`${countyName}`)\n         \n        if(county.properties.COUNTYFP > 34){\n            layer.options.fillColor = \"green\"\n        }\n    };\n\n    \n\n    render() {\n\n        return ( \n            <div>\n                <MapContainer style = {{height: \"80vh\", width: '80%', margin: 'auto'}} zoom = {6} center = {[38, -122]} scrollWheelZoom = {true}>\n                    <GeoJSON style = {this.countyStyle} data ={county_ca.features} onEachFeature={this.onEachCounty}/>\n                    <TileLayer\n                     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                     />\n                    {this.state.locations.map((location,idx) => \n                        <Marker key={`marker-${idx}`} position={location.position}>\n                            <Popup anchor=\"bottom\" >\n                                {location.name}\n                                <span> \"\\n\"</span>\n                                {location.city}\n                            </Popup>\n                        </Marker>\n                    )}\n\n\n                </MapContainer>\n            </div>\n        );\n    }\n}\n\nexport default MyMap"]},"metadata":{},"sourceType":"module"}